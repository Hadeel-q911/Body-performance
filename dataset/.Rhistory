<<<<<<< HEAD
=======
ncol(dataset)
#ه encoding للان بنحذه او بنسوي له
# Define bins for discretization
#dataset$age=cut(dataset$age, breaks = seq(21,64, by=14), right=FALSE)
View(dataset)
dataset [,3:4:5:6:7:8:9:11]=scale(dataset [,3:4:5:6:7:8:9:11])
#gender attribute
contingency_table <- table(dataset$gender, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#age attribute
contingency_table <- table(dataset$age, dataset$class)
>>>>>>> dc05cda287616e0bd17f45cd0b47998c8fd9706c
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#height_cm attribute
contingency_table <- table(dataset$height_cm, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#weight_kg attribute
contingency_table <- table(dataset$weight_kg, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#body.fat_.  attribute
contingency_table <- table(dataset$body.fat_., dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#diastolic  attribute
contingency_table <- table(dataset$diastolic, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#systolic attribute
contingency_table <- table(dataset$systolic, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#gripForce attribute
contingency_table <- table(dataset$gripForce, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#sit.and.bend.forward_cm attribute
contingency_table <- table(dataset$sit.and.bend.forward_cm, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#sit.ups.counts attribute
contingency_table <- table(dataset$sit.ups.counts, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#broad.jump_cm attribute
contingency_table <- table(dataset$broad.jump_cm, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
# Load required libraries
library(corrplot)
library(dplyr)
library(caret)
#(نسوي انكودينق افضل او نلغي الديسكرايتيزيشن ويصير هذا ماله داعي لان اوردي نيومريك)
# Convert factor attribute to numeric
#dataset$age <- as.numeric(dataset$age)
# Verify the conversion
#str(dataset$age)
# Convert factor attribute to numeric
dataset$gender <- as.numeric(as.character(dataset$gender))
# Verify the conversion
str(dataset$gender)
# Calculate the correlation matrix for numeric attributes
correlation_matrix <- cor(dataset[, 1:10])
# Display the correlation matrix
corrplot(correlation_matrix, method = "color")
# Find highly correlated attributes
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.7)
# List the names of highly correlated attributes
highly_correlated_names <- names(dataset[, 1:10][, highly_correlated])
# Remove the highly correlated attributes from the dataset
reduced_dataset <-dataset %>%
select(-one_of(highly_correlated_names))
# Verify the reduced dataset
head(reduced_dataset)
ncol(dataset)
nrow(dataset)
dataset <- dataset[,-which(names(dataset) == "class")]
#varify removing and data types
str(dataset)
# Convert gender attribute to numeric
dataset$gender <- as.numeric(as.character(dataset$gender))
# Verify the conversion
str(dataset$gender)
str(dataset)
library(factoextra)
library(fpc)
library(cluster)
library(NbClust)
library(fpc)
kmeansruns.result <- kmeansruns(dataset)
kmeansruns.result
fviz_cluster(kmeansruns.result, data = dataset)
# 1-  define function to compute average silhouette for k clusters using silhouette()
silhouette_score <- function(k){
km <- kmeans(dataset, centers = k,nstart=25) # if centers is a number, how many random sets should be chosen?
ss <- silhouette(km$cluster, dist(dataset))
sil<- mean(ss[, 3])
return(sil)
}
##  k cluster range from 2 to 10
k <- 2:10
##  call  function fore k value
avg_sil <- sapply(k, silhouette_score)  ##Apply a Function over a List or Vector
plot(k, type='b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores', frame=FALSE)
#is aplay -> loop
# 2- silhouette method
#install.packages("NbClust")
library(NbClust)
library(factoextra)
fviz_nbclust(dataset, kmeans, method = "silhouette")+
labs(subtitle = "Silhouette method")
#b) NbClust validation
fres.nbclust <- NbClust(dataset, distance="euclidean", min.nc = 2, max.nc = 10, method="kmeans", index="all")
# visualize clustering (2 clusters)
#install.packages("factoextra")
library(factoextra)
fviz_cluster(kmeans.result, data = dataset)
dataset<- read.csv("bodyPerformance.csv")
View(dataset)
str(dataset)
print(dataset)
#Number of rows
nrow(dataset)
#Number of column
ncol(dataset)
#encoding Class:
dataset$class = factor(dataset$class,levels =
c("A","B", "C","D"), labels = c(1, 2, 3,4))
boxplot(dataset$class,
ylab= "The person’s class boxplot",
main= "Boxplot of class")
plot(dataset$gender, dataset$class, main = " the performance between meal amd female",
xlab = "gender", ylab = "class",
xlim = c(0,1), ylim = c(0,4))
plot(dataset$height_cm, dataset$weight_kg, main = "Body Measurement",
xlab = "height", ylab = "weight",
xlim = c(100,200), ylim = c(20,150))
hist(dataset$body.fat_.)
plot(dataset$age, dataset$diastolic, main = "Bold pressure of Males abd famales",
xlab = "age", ylab = "diastolic",
xlim = c(20,64), ylim = c(0,200))
summary(dataset$age)
summary(dataset$height_cm)
summary(dataset$weight_kg)
summary(dataset$body.fat_.)
summary(dataset$diastolic)
summary(dataset$systolic)
summary(dataset$gripForce)
summary(dataset$sit.and.bend.forward_cm)
summary(dataset$sit.ups.counts)
summary(dataset$broad.jump_cm)
sum(duplicated(dataset))
#Remove duplicated rows
dataset <- dataset[!duplicated (dataset), ]
#To make sure that the deletion was successful
sum(duplicated(dataset))
#to find the total null values in the dataset
sum(is.na(dataset))
#install outliers package:
library(outliers)
# age boxplot :
boxplot(dataset$age ,
ylab= "The person’s age in years boxplot",
main= "Boxplot of age")
#Hight boxplot :
boxplot(dataset$height_cm ,
ylab= "The person’s height in cm",
main= "Boxplot of height_cm")
#Weight boxplot;
boxplot(dataset$weight_kg ,
ylab= "The person’s weight in Kg",
main= "Boxplot of weight")
#body fat boxplot :
boxplot(dataset$body.fat_.,
ylab= "the person's body fat" ,
main= "Boxplot of body fat_%")
#diastolic box plot :
boxplot(dataset$diastolic,
ylab= "the person's diastolic ",
main= "Boxplot of diastolic")
#systolic box plot:
boxplot(dataset$systolic,
ylab= "The person's systolic " ,
main= "Boxplot of systolic")
#gripForce box plot:
boxplot(dataset$gripForc,
ylab= "the person's gripForce " ,
main= "Boxplot of gripForc")
#sit and bend forward_cm box plot:
boxplot(dataset$sit.and.bend.forward_cm,
ylab= "sit and bend forward_cm" ,
main= "Boxplot of sit and bend forward_cm")
#sit-ups counts_cm box plot:
boxplot(dataset$sit.ups.counts,
ylab= "sit-ups" ,
main= "Boxplot of sit-ups")
#broad jump_cm box plot:
boxplot(dataset$broad.jump_cm,
ylab= "broad jump_cm " ,
main= "Boxplot of broad jump_cm ")
#Detect outlir for 'age':
outAge = outlier(dataset$age, logical =TRUE)
#number of outliers:
sum(outAge)
Find_outlier = which(outAge ==TRUE, arr.ind = TRUE)
outAge
Find_outlier
#Delete age outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'height_cm':
outH = outlier(dataset$height_cm, logical =TRUE)
#number of outliers:
sum(outH)
Find_outlier = which(outH ==TRUE, arr.ind = TRUE)
outH
Find_outlier
#Delete height_cm outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'weight_kg':
outW= outlier(dataset$weight_kg, logical =TRUE)
#number of outliers:
sum(outW)
Find_outlier = which(outW ==TRUE, arr.ind = TRUE)
outW
Find_outlier
#Delete weight_kg outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'body.fat\_.':
outefat = outlier(dataset$body.fat_., logical =TRUE)
#number of outliers:
sum(outefat)
Find_outlier = which(outefat ==TRUE, arr.ind = TRUE)
outefat
Find_outlier
#Delete body.fat outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'systolic':
outesys = outlier(dataset$systolic, logical =TRUE)
#number of outliers:
sum(outesys)
Find_outlier = which(outesys ==TRUE, arr.ind = TRUE)
outesys
Find_outlier
#Delete systolic outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'gripForce':
outegrip = outlier(dataset$gripForce, logical =TRUE)
#number of outliers:
sum(outegrip)
Find_outlier = which(outegrip ==TRUE, arr.ind = TRUE)
outegrip
Find_outlier
#Delete gripForce  outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'sit.and.bend.forward_cm':
outesit = outlier(dataset$sit.and.bend.forward_cm, logical =TRUE)
#number of outliers:
sum(outesit)
Find_outlier = which(outesit ==TRUE, arr.ind = TRUE)
outesit
Find_outlier
#Delete sit.and.bend.forward_cm outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'sit.up.count':
outesitup = outlier(dataset$sit.ups.counts, logical =TRUE)
#number of outliers:
sum(outesitup)
Find_outlier = which(outesitup ==TRUE, arr.ind = TRUE)
outesitup
Find_outlier
#Delete age outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'broad.jump_cm':
Outjump = outlier(dataset$broad.jump_cm, logical =TRUE)
sum(Outjump)
Find_outlier = which(Outjump ==TRUE, arr.ind = TRUE)
Outjump
Find_outlier
dataset= dataset[-Find_outlier,]
#check after deleting
#Number of rows and column
nrow(dataset)
ncol(dataset)
#for clustering task:
AgeBeforeDis <- dataset$age
# Define bins for discretization
dataset$age=cut(dataset$age, breaks = seq(21,64, by=14), right=FALSE)
View(dataset)
dataset [,3:4:5:6:7:8:9:11]=scale(dataset [,3:4:5:6:7:8:9:11])
#gender attribute
contingency_table <- table(dataset$gender, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#age attribute
contingency_table <- table(dataset$age, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#height_cm attribute
contingency_table <- table(dataset$height_cm, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#weight_kg attribute
contingency_table <- table(dataset$weight_kg, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#body.fat_.  attribute
contingency_table <- table(dataset$body.fat_., dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#diastolic  attribute
contingency_table <- table(dataset$diastolic, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#systolic attribute
contingency_table <- table(dataset$systolic, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#gripForce attribute
contingency_table <- table(dataset$gripForce, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#sit.and.bend.forward_cm attribute
contingency_table <- table(dataset$sit.and.bend.forward_cm, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#sit.ups.counts attribute
contingency_table <- table(dataset$sit.ups.counts, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#broad.jump_cm attribute
contingency_table <- table(dataset$broad.jump_cm, dataset$class)
chi_square_result <- chisq.test(contingency_table)
print(chi_square_result)
#in case we need the old dataset (with class label)
datasetBeforeClus <- dataset
dataset <- dataset[,-which(names(dataset) == "class")]
#varify removing class
str(dataset)
dataset$age <- AgeBeforeDis
#varify update
str(dataset)
str(dataset)
dataset$gender <- as.numeric(as.character(dataset$gender))
# Verify the conversion
str(dataset$gender)
#install necessary packeges:
library(factoextra)
library(fpc)
library(cluster)
library(NbClust)
library(fpc)
kmeansruns.result <- kmeansruns(dataset)
kmeansruns.result
fviz_cluster(kmeansruns.result, data = dataset)
#set a seed for random number generation  to make the results reproducible
set.seed(8953)
kmeans.result <- kmeans(dataset, 4)
#for clustering task:
AgeBeforeDis <- dataset$age
# Define bins for discretization
dataset$age=cut(dataset$age, breaks = seq(21,64, by=14), right=FALSE)
View(dataset)
dataset [,3:4:5:6:7:8:9:11]=scale(dataset [,3:4:5:6:7:8:9:11])
#in case we need the old dataset (with class label)
datasetBeforeClus <- dataset
dataset <- dataset[,-which(names(dataset) == "class")]
#varify removing class
str(dataset)
dataset$age <- AgeBeforeDis
#varify update
str(dataset)
dataset$gender <- as.numeric(as.character(dataset$gender))
dataset$gender <- as.numeric(as.character(dataset$gender))
dataset<- read.csv("bodyPerformance.csv")
View(dataset)
str(dataset)
#encoding Class:
dataset$class = factor(dataset$class,levels =
c("A","B", "C","D"), labels = c(1, 2, 3,4))
#encoding Gender:
dataset$gender = factor(dataset$gender,levels =
c("F","M"), labels = c(0,1))
#Remove duplicated rows
dataset <- dataset[!duplicated (dataset), ]
#To make sure that the deletion was successful
sum(duplicated(dataset))
#to find the total null values in the dataset
sum(is.na(dataset))
#install outliers package:
library(outliers)
#install outliers package:
library(outliers)
# age boxplot :
boxplot(dataset$age ,
ylab= "The person’s age in years boxplot",
main= "Boxplot of age")
#Detect outlir for 'age':
outAge = outlier(dataset$age, logical =TRUE)
#number of outliers:
sum(outAge)
Find_outlier = which(outAge ==TRUE, arr.ind = TRUE)
outAge
Find_outlier
#Delete age outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'height_cm':
outH = outlier(dataset$height_cm, logical =TRUE)
#number of outliers:
sum(outH)
Find_outlier = which(outH ==TRUE, arr.ind = TRUE)
outH
Find_outlier
#Delete height_cm outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'weight_kg':
outW= outlier(dataset$weight_kg, logical =TRUE)
#number of outliers:
sum(outW)
Find_outlier = which(outW ==TRUE, arr.ind = TRUE)
outW
Find_outlier
#Delete weight_kg outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'body.fat\_.':
outefat = outlier(dataset$body.fat_., logical =TRUE)
#number of outliers:
sum(outefat)
Find_outlier = which(outefat ==TRUE, arr.ind = TRUE)
outefat
Find_outlier
#Delete body.fat outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'systolic':
outesys = outlier(dataset$systolic, logical =TRUE)
#number of outliers:
sum(outesys)
Find_outlier = which(outesys ==TRUE, arr.ind = TRUE)
outesys
Find_outlier
#Delete systolic outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'gripForce':
outegrip = outlier(dataset$gripForce, logical =TRUE)
#number of outliers:
sum(outegrip)
Find_outlier = which(outegrip ==TRUE, arr.ind = TRUE)
outegrip
Find_outlier
#Delete gripForce  outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'sit.and.bend.forward_cm':
outesit = outlier(dataset$sit.and.bend.forward_cm, logical =TRUE)
#number of outliers:
sum(outesit)
Find_outlier = which(outesit ==TRUE, arr.ind = TRUE)
outesit
Find_outlier
#Delete sit.and.bend.forward_cm outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'sit.up.count':
outesitup = outlier(dataset$sit.ups.counts, logical =TRUE)
#number of outliers:
sum(outesitup)
Find_outlier = which(outesitup ==TRUE, arr.ind = TRUE)
outesitup
Find_outlier
#Delete age outliers:
dataset= dataset[-Find_outlier,]
#Detect outlir for 'broad.jump_cm':
Outjump = outlier(dataset$broad.jump_cm, logical =TRUE)
sum(Outjump)
Find_outlier = which(Outjump ==TRUE, arr.ind = TRUE)
Outjump
Find_outlier
dataset= dataset[-Find_outlier,]
#check after deleting
#Number of rows and column
nrow(dataset)
ncol(dataset)
#for clustering task:
AgeBeforeDis <- dataset$age
# Define bins for discretization
dataset$age=cut(dataset$age, breaks = seq(21,64, by=14), right=FALSE)
View(dataset)
dataset [,3:4:5:6:7:8:9:11]=scale(dataset [,3:4:5:6:7:8:9:11])
#set a seed for random number generation to make the results reproducible
set.seed(8953)
kmeans.result <- kmeans(dataset, 2)
dataset$gender <- as.numeric(as.character(dataset$gender))
# Verify the conversion
str(dataset$gender)
#install necessary packeges:
library(factoextra)
library(fpc)
library(cluster)
library(NbClust)
library(fpc)
kmeansruns.result <- kmeansruns(dataset)
library(fpc)
kmeansruns.result <- kmeansruns(dataset)
library(fpc)
kmeansruns.result <- kmeansruns(dataset)
<<<<<<< HEAD
dataset<- read.csv("bodyPerformance.csv")
View(dataset)
str(dataset)
#Number of rows
nrow(dataset)
#Number of column
ncol(dataset)
#encoding Class:
dataset$class = factor(dataset$class,levels =
c("A","B", "C","D"), labels = c(1, 2, 3,4))
#encoding Gender:
dataset$gender = factor(dataset$gender,levels =
c("F","M"), labels = c(0,1))
plot(dataset$age, dataset$gripForce, main = "Body Measurement",
xlab = "age", ylab = "gripForce",
xlim = c(20,64), ylim = c(20,71 ))
dataset
plot(dataset$broad.jump_cm, dataset$weight_kg,
xlab = "broad.jump_cm", ylab = "weight_kg",
xlim = c(0,303), ylim = c(26.3,138 ))
=======
View(dataset)
dataset [,3:4:5:6:7:8:9:11]=scale(dataset [,3:4:5:6:7:8:9:11])
dataset<- read.csv("bodyPerformance.csv")
View(dataset)
str(dataset)
library(NbClust)
library(factoextra)
fviz_nbclust(dataset, kmeans, method = "silhouette")+ labs(subtitle = "Silhouette method")
>>>>>>> dc05cda287616e0bd17f45cd0b47998c8fd9706c
